// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User models
model User {
  id        String   @id @default(uuid())
  username  String   @unique
  name      String
  email     String   @unique
  password  String
  role      String   @default("MANAGER") // Values: "OWNER", "MANAGER", "KITCHEN", "BAR", "WAITER", "RECEPTIONIST", "SHISHA"
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?

  // New hierarchical relationship fields
  parentId    String? // ID of the parent user (null for top-level users)
  parent      User?   @relation("UserHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children    User[]  @relation("UserHierarchy")
  isGroupHead Boolean @default(false) // Whether this user is a group head (e.g., main "Waiter" user)
  groupRole   String? // The role of the group this user belongs to

  // Existing relations
  reservations  Reservation[]
  orders        Order[]
  staff         Staff?
  notifications Notification[]
}

// Staff management
model Staff {
  id            String        @id @default(uuid())
  userId        String        @unique
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  position      String
  hourlyRate    Float
  hireDate      DateTime
  contactNumber String
  address       String
  performance   Performance[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  Shift         Shift[]
}

model Shift {
  id        String   @id @default(uuid())
  staffId   String
  staff     Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade)
  startTime DateTime
  endTime   DateTime?
  status    String   @default("SCHEDULED") // Values: "SCHEDULED", "COMPLETED", "ABSENT", "LATE", "ACTIVE"
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Performance {
  id        String   @id @default(uuid())
  staffId   String
  staff     Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade)
  date      DateTime
  rating    Float
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Table management
model Table {
  id           String        @id @default(uuid())
  number       Int
  capacity     Int
  section      String
  status       String        @default("AVAILABLE") // Values: "AVAILABLE", "OCCUPIED", "RESERVED", "MAINTENANCE"
  reservations Reservation[]
  orders       Order[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

// Reservation system
model Reservation {
  id               String   @id @default(uuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tableId          String
  table            Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)
  dateTime         DateTime
  guestCount       Int
  status           String   @default("CONFIRMED") // Values: "PENDING", "CONFIRMED", "CANCELLED", "COMPLETED", "NO_SHOW"
  specialRequests  String?
  contactNumber    String
  customerName     String
  confirmationSent Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

// Menu management
model Category {
  id          String     @id @default(uuid())
  name        String
  description String?
  menuItems   MenuItem[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model MenuItem {
  id          String       @id @default(uuid())
  name        String
  description String?
  price       Float
  categoryId  String
  category    Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  image       String?
  isAvailable Boolean      @default(true)
  popular     Boolean      @default(false)
  metadata    String?      // JSON string for storing display options and other metadata
  ingredients Ingredient[]
  orderItems  OrderItem[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

// Inventory management
model Ingredient {
  id                String            @id @default(uuid())
  name              String
  category          String
  quantity          Float
  currentStock      Float
  unit              String
  minLevel          Float
  pricePerUnit      Float
  locationInStorage String?
  notes             String?
  expiryDate        DateTime?
  maxLevel          Float?
  reorderPoint      Float?
  menuItems         MenuItem[]
  supplier          Supplier?         @relation(fields: [supplierId], references: [id])
  supplierId        String?
  usage             IngredientUsage[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model IngredientUsage {
  id           String     @id @default(uuid())
  ingredientId String
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  date         DateTime
  amount       Float
  type         String // Values: "INVENTORY_ADDITION", "RECIPE_USAGE", "WASTE", "ADJUSTMENT"
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Supplier {
  id          String       @id @default(uuid())
  name        String
  contactName String?
  email       String
  phone       String
  address     String?
  ingredients Ingredient[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

// Order management
model Order {
  id            String      @id @default(uuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  tableId       String?
  table         Table?      @relation(fields: [tableId], references: [id])
  status        String      @default("PENDING") // Values: "PENDING", "IN_PROGRESS", "READY", "COMPLETED", "CANCELLED"
  type          String      @default("DINE_IN") // Values: "DINE_IN", "TAKEOUT", "DELIVERY"
  items         OrderItem[]
  total         Float
  tax           Float
  paidAmount    Float?
  paymentStatus String      @default("PENDING") // Values: "PENDING", "PAID", "PARTIALLY_PAID", "REFUNDED"
  paymentMethod String?
  notes         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model OrderItem {
  id         String   @id @default(uuid())
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  quantity   Int
  price      Float
  notes      String?
  status     String   @default("PENDING") // Values: "PENDING", "PREPARING", "READY", "SERVED", "CANCELLED"
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// Notification system
model Notification {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String
  message   String
  read      Boolean  @default(false)
  type      String // Values: "ORDER", "RESERVATION", "INVENTORY", "STAFF", "SYSTEM"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
